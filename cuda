$cat rose_md.cu
# include <stdlib.h>
# include <stdio.h>
# include <time.h>
# include <math.h>
int main(int argc,char *argv[]);
void compute(int np,int nd,double pos[],double vel[],double mass,double f[],double
*pot,double *kin);
double cpu_time();
double dist(int nd,double r1[],double r2[],double dr[]);
void initialize(int np,int nd,double pos[],double vel[],double acc[]);
void r8mat_uniform_ab(int m,int n,double a,double b,int *seed,double r[]);
void timestamp();
void update(int np,int nd,double pos[],double vel[],double f[],double acc[],double
mass,double dt);
/******************************************************************************/
__device__ double dist_rose(int nd,double r1[],double r2[],double dr[]){
double d;
int i;
d = 0.0;
for(i = 0;i < nd;i++) {dr[i] =(r1[i] - r2[i]);d =(d +(dr[i] * dr[i]));}
d = sqrt(d);
return d;
}
int main(int argc,char *argv[])
/******************************************************************************/

{
double *acc;
double ctime;
double dt;
double e0;
double *force;
int i;
int id;
double kinetic;
double mass = 1.0;
int nd;
int np;
double *pos;
double potential;
int step;
int step_num;
int step_print;
int step_print_index;
int step_print_num;
double *vel;
timestamp();
printf("\n");
printf("MD\n");
printf(" C version\n");
printf(" A molecular dynamics program.\n");
/*
Get the spatial dimension.
*/
if (1 < argc) {
nd = atoi(argv[1]);
}
else {
printf("\n");
printf(" Enter ND, the spatial dimension (2 or 3).\n");
scanf("%d",&nd);
}
//
// Get the number of particles.
//
if (2 < argc) {
np = atoi(argv[2]);
}
else {
printf("\n");
printf(" Enter NP, the number of particles (500, for instance).\n");
scanf("%d",&np);
}
//
// Get the number of time steps.
//
if (3 < argc) {
step_num = atoi(argv[3]);
}
else {
printf("\n");
printf(" Enter ND, the number of time steps (500 or 1000, for instance).\n");
scanf("%d",&step_num);
}
//
// Get the time steps.
//
if (4 < argc) {
dt = atof(argv[4]);
}
else {
printf("\n");
printf(" Enter DT, the size of the time step (0.1, for instance).\n");
scanf("%g",&dt);
}
/*
Report.
*/
printf("\n");
printf(" ND, the spatial dimension, is %d\n",nd);
printf(" NP, the number of particles in the simulation, is %d\n",np);
printf(" STEP_NUM, the number of time steps, is %d\n",step_num);
printf(" DT, the size of each time step, is %f\n",dt);
/*
Allocate memory.
*/
acc = ((double *)(malloc(((nd * np) * sizeof(double )))));
force = ((double *)(malloc(((nd * np) * sizeof(double )))));
pos = ((double *)(malloc(((nd * np) * sizeof(double )))));
vel = ((double *)(malloc(((nd * np) * sizeof(double )))));
/*
This is the main time-stepping loop:
Compute forces and energies,
Update positions, velocities, and accelerations.
*/
printf("\n");
printf(" At each step, we report the potential and kinetic energies.\n");
printf(" The sum of these energies should be a constant.\n");
printf(" As an accuracy check, we also print the relative error\n");
printf(" in the total energy.\n");
printf("\n");
printf(" Step Potential Kinetic (P+K-E0)/E0\n");
printf(" Energy P Energy K Relative Energy Error\n");
printf("\n");
step_print = 0;
step_print_index = 0;
step_print_num = 10;
ctime = cpu_time();
for (step = 0; step <= step_num; step++) {
if (step == 0) {
initialize(np,nd,pos,vel,acc);
}
else {
update(np,nd,pos,vel,force,acc,mass,dt);
}
compute(np,nd,pos,vel,mass,force,&potential,&kinetic);
if (step == 0) {
e0 = (potential + kinetic);
}
if (step == step_print) {
printf(" %8d %14f %14f %14e\n",step,potential,kinetic,(((potential + kinetic) -
e0) / e0));
step_print_index = (step_print_index + 1);
step_print = ((step_print_index * step_num) / step_print_num);
// printf("\nforce = ");
// for (int ttt = 0; ttt < nd*np; ttt++) {
// printf("%lf ",force[ttt]);
// }
// printf("\n\n");
}
}
/*
Report timing.
*/
ctime = (cpu_time() - ctime);
printf("\n");
printf(" Elapsed cpu time: %f seconds.\n",ctime);
/*
Free memory.
*/
free(acc);
free(force);
free(pos);
free(vel);
/*
Terminate.
*/
printf("\n");
printf("MD\n");
printf(" Normal end of execution.\n");
printf("\n");
timestamp();
return 0;
}
/******************************************************************************/
void __global__ kernel0(double pe[],double ke[],double * f,double * pos,double * vel,int
np,int i,int nd,int j,double d,double PI2,double d2, int device_M , int device_N){
int k = blockIdx.x * blockDim.x + threadIdx.x;
int print_statement_deleted_here=0;
double rij[3UL];
pe[k] = 0;
ke[k] = 0;
{
for(i = 0;i < nd;i++) {
f[i +(k * nd)] = 0.0;
}
for(j = 0;j < np;j++) {
if(k != j) {
d = dist_rose(nd,(pos +(k * nd)),(pos +(j * nd)),rij);
if(d < PI2) {
d2 = d;
}else {
d2 = PI2;
}
pe[k] =(pe[k] +(0.5 * pow(sin(d2),2)));
for(i = 0;i < nd;i++) {
f[i +(k * nd)] =(f[i +(k * nd)] -((rij[i] * sin((2.0 * d2))) / d));
}}}
for(i = 0;i < nd;i++) {ke[k] =(ke[k] +(vel[i +(k * nd)] * vel[i +(k * nd)]));}}
__syncthreads();
}
void compute(int np,int nd,double pos[],double vel[],double mass,double f[],double
*pot,double *kin)
/******************************************************************************/

{
double *device_vel;
double *device_pos;
double *device_f;
double total_ke = 0;
double *host_ke;
double *device_ke;
double total_pe = 0;
double *host_pe;
double *device_pe;
double d;
double d2;
int i;
int j;
int k;
double ke;
double pe;
double PI2 = 3.141592653589793 / 2.0;
double rij[3UL];
pe = 0.0;
ke = 0.0;
//Inserting code for memory allocation grid size and block size calculation
host_pe= (double*)malloc((1)*((int) ((np - 0 ) / (1)))*sizeof(double));
cudaMalloc((void **) &device_pe,( 1)*((int) ((np - 0 ) / (1)))*sizeof(double));
//Inserting code for memory allocation grid size and block size calculation
host_ke= (double*)malloc((1)*((int) ((np - 0 ) / (1)))*sizeof(double));
cudaMalloc((void **) &device_ke,( 1)*((int) ((np - 0 ) / (1)))*sizeof(double));
//Please note this is the section wherein the number of blocks and threads are calculated.
To change the number of threads alter the dimBlock whereas to change the number of blocks
alter the dimGrid
int D_rows = ((int) ((np - 0 ) / (1)) > 1024 ) ? (int) ((np - 0 ) / (1))/1024 : (int) ((np
- 0 ) / (1));
int D_cols = ((int) ((np - 0 ) / (1)) > 1024 ) ? 1024 : 1;
dim3 dimGrid(D_rows,1);
dim3 dimBlock(D_cols,1);
cudaMalloc((void **) &device_f,(np*nd)*sizeof(double));
cudaMemcpy(device_f,f,(np*nd)*sizeof(double),cudaMemcpyHostToDevice);
cudaMalloc((void **) &device_pos,(np*nd)*sizeof(double));
cudaMemcpy(device_pos,pos,(np*nd)*sizeof(double),cudaMemcpyHostToDevice);
cudaMalloc((void **) &device_vel,(nd*np)*sizeof(double));
cudaMemcpy(device_vel,vel,(nd*np)*sizeof(double),cudaMemcpyHostToDevice);
kernel0<<<dimGrid,dimBlock>>>(device_pe,device_ke,device_f,device_pos,device_vel,np,i,nd,j
,d,PI2,d2,1,(int) ((np - 0 ) / (1)));
/*
int IPT_function_replace;
*/
//Copying from Device to Host
cudaMemcpy(host_pe,device_pe,((int) ((np - 0 ) / (1)))*sizeof(double),
cudaMemcpyDeviceToHost);
//code for variable reduction
for(long row = 0; row < 1; ++row){for(long col = 0; col < (int) ((np - 0 ) / (1)); ++col)
{ total_pe+= host_pe[row*(int) ((np - 0 ) / (1))+ col]; } }
pe+= total_pe;
// Ending Parallelization
//Copying from Device to Host
cudaMemcpy(host_ke,device_ke,((int) ((np - 0 ) / (1)))*sizeof(double),
cudaMemcpyDeviceToHost);
//code for variable reduction
for(long row = 0; row < 1; ++row){for(long col = 0; col < (int) ((np - 0 ) / (1)); ++col)
{ total_ke+= host_ke[row*(int) ((np - 0 ) / (1))+ col]; } }
ke+= total_ke;
// Ending Parallelization
cudaMemcpy(f,device_f,(np*nd)*sizeof(double), cudaMemcpyDeviceToHost);
cudaFree(device_f);
cudaFree(device_pos);
cudaFree(device_vel);
ke = ((ke * 0.5) * mass);
*pot = pe;
*kin = ke;
}
/*******************************************************************************/
double cpu_time()
/*******************************************************************************/

{
double value;
value = (((double )(clock())) / ((double )1000000l));
return value;
}
/******************************************************************************/
double dist(int nd,double r1[],double r2[],double dr[])
/******************************************************************************/

{
double d;
int i;
d = 0.0;
for (i = 0; i < nd; i++) {
dr[i] = (r1[i] - r2[i]);
d = (d + (dr[i] * dr[i]));
}
d = sqrt(d);
return d;
}
/******************************************************************************/
void initialize(int np,int nd,double pos[],double vel[],double acc[])
/******************************************************************************/

{
int i;
int j;
int seed;
/*
Set positions.
*/
seed = 123456789;
r8mat_uniform_ab(nd,np,0.0,10.0,&seed,pos);
/*
Set velocities.
*/
for (j = 0; j < np; j++) {
for (i = 0; i < nd; i++) {
vel[i + (j * nd)] = 0.0;
}
}
/*
Set accelerations.
*/
for (j = 0; j < np; j++) {
for (i = 0; i < nd; i++) {
acc[i + (j * nd)] = 0.0;
}
}
}
/******************************************************************************/
void r8mat_uniform_ab(int m,int n,double a,double b,int *seed,double r[])
/******************************************************************************/

{
int i;
const int i4_huge = 2147483647;
int j;
int k;
if ( *seed == 0) {
fprintf(stderr,"\n");
fprintf(stderr,"R8MAT_UNIFORM_AB - Fatal error!\n");
fprintf(stderr," Input value of SEED = 0.\n");
exit(1);
}
for (j = 0; j < n; j++) {
for (i = 0; i < m; i++) {
k = ( *seed / 127773);
*seed = ((16807 * ( *seed - (k * 127773))) - (k * 2836));
if ( *seed < 0) {
*seed = ( *seed + i4_huge);
}
r[i + (j * m)] = (a + (((b - a) * ((double )( *seed))) * 4.656612875E-10));
}
}
}
/******************************************************************************/
void timestamp()
/******************************************************************************/

{
# define TIME_SIZE 40
static char time_buffer[40UL];
const struct tm *tm;
size_t len;
time_t now;
now = time(0);
tm = (localtime((&now)));
len = strftime(time_buffer,40,"%d %B %Y %I:%M:%S %p",tm);
printf("%s\n",time_buffer);
# undef TIME_SIZE
}
/******************************************************************************/
void update(int np,int nd,double pos[],double vel[],double f[],double acc[],double
mass,double dt)
/******************************************************************************/

{
int i;
int j;
double rmass;
rmass = (1.0 / mass);
for (j = 0; j < np; j++) {
for (i = 0; i < nd; i++) {
pos[i + (j * nd)] = ((pos[i + (j * nd)] + (vel[i + (j * nd)] * dt)) + (((0.5 * acc[i
+ (j * nd)]) * dt) * dt));
vel[i + (j * nd)] = (vel[i + (j * nd)] + ((0.5 * dt) * ((f[i + (j * nd)] * rmass) +
acc[i + (j * nd)])));
acc[i + (j * nd)] = (f[i + (j * nd)] * rmass);
}
}
}
